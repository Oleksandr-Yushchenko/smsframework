<?php

/**
 * @file
 * The core of the SMS Framework. Provides gateway management and API for
 * sending and receiving SMS messages.
 */

use Drupal\Core\Form\FormStateInterface;

// Direction codes.
define('SMS_DIR_NONE',  0);
define('SMS_DIR_OUT',   1);
define('SMS_DIR_IN',    2);
define('SMS_DIR_ALL',   4);

// Message status codes.
// 0=Unknown, 2xx=Positive, 3xx=Positive/Neutral (context-dependent), 4xx=Negative
define('SMS_MSG_STATUS_UNKNOWN',      0);
define('SMS_MSG_STATUS_OK',         200);
define('SMS_MSG_STATUS_DELIVERED',  202);
define('SMS_MSG_STATUS_QUEUED',     302);
define('SMS_MSG_STATUS_ERROR',      400);
define('SMS_MSG_STATUS_NOCREDIT',   402);
define('SMS_MSG_STATUS_EXPIRED',    408);

// Gateway response codes.
// 0=Unknown, 2xx=Positive, 4xx=Negative(likely client err), 5xx=Negative(likely gateway err)
define('SMS_GW_UNKNOWN_STATUS',      0);
define('SMS_GW_OK',                200);
define('SMS_GW_ERR_AUTH',          401);
define('SMS_GW_ERR_INVALID_CALL',  400);
define('SMS_GW_ERR_NOT_FOUND',     404);
define('SMS_GW_ERR_MSG_LIMITS',    413);
define('SMS_GW_ERR_MSG_ROUTING',   502);
define('SMS_GW_ERR_MSG_QUEUING',   408);
define('SMS_GW_ERR_MSG_OTHER',     409);
define('SMS_GW_ERR_SRC_NUMBER',    415);
define('SMS_GW_ERR_DEST_NUMBER',   416);
define('SMS_GW_ERR_CREDIT',        402);
define('SMS_GW_ERR_OTHER',         500);

// Carrier status.
define('SMS_CARRIER_DEFAULT', 0);
define('SMS_CARRIER_OVERRIDDEN', 1);
define('SMS_CARRIER_NORMAL', 3);

/**
 * Implements hook_theme().
 */
function sms_theme() {
  $items['sms_carriers_admin_form'] = array(
    'render element' => 'form',
  );

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 */
function sms_cron_queue_info() {
  return array(
    'sms_incoming' => array(
      'worker callback' => 'sms_incoming_queue_worker',
    ),
  );
}

/**
 * Sends a message using the active gateway.
 *
 * @param string $number
 *   The destination number.
 * @param string $message
 *   The text of the messsage to send.
 * @param array $options
 *   An array of additional properties as defined by gateway modules.
 *
 * @return bool
 *   true if the message was sent to the server, false otherwise.
 *
 * @see sms_handle_result().
 */
function sms_send($number, $message, $options = array()) {
  // Check if preferred gateway is specified in the $options.
  if (isset($options['gateway'])) {
    $gateway = sms_gateways('gateway', $options['gateway']);
  }
  if (empty($gateway)) {
    $gateway = sms_default_gateway();
  }

  foreach (\Drupal::moduleHandler()->getImplementations('sms_send') as $module) {
    $function = $module . '_sms_send';
    $function($number, $message, $options, $gateway);
  }


  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $message = \Drupal::token()->replace($message);
  }

  $response = NULL;
  if (isset($gateway['send']) && function_exists($gateway['send'])) {
    $response = $gateway['send']($number, $message, $options);
  }
  $result = sms_handle_result($response, $number, $message);

  // Post process hook.
  foreach (\Drupal::moduleHandler()->getImplementations('sms_send_process') as $module) {
    $function = $module . '_sms_send_process';
    $function('post process', $number, $message, $options, $gateway, $result);
  }

  return $result;
}

/**
 * Handles the response back from the sms gateway.
 *
 * This method also logs an error message to watchdog if there was a failure.
 *
 * @param array $result
 *   An array containing information on the message response, with the keys:
 *   - status: true if it was successful, false otherwise.
 *   - message: an error message if the 'status' is false.
 * @param string $number
 *   The comma-separated list of the message's recipient numbers.
 * @param string $message
 *   The message that was sent.
 *
 * @return bool
 *   true if the message was sent to the server, false otherwise.
 */
function sms_handle_result($result, $number, $message) {
  if ($result['status']) {
    return TRUE;
  }
  else {
    $error_message = 'Sending SMS to %number failed.';
    $variables['%number'] = $number;
    if ($result['message']) {
      $error_message .= ' The gateway said ' . $result['message'];
      if (!empty($result['variables'])) {
        $variables = array_merge($variables, $result['variables']);
      }
    }
    \Drupal::logger('sms')->error($error_message, $variables);
    return FALSE;
  }
}

/**
 * Queue worker callback for queued incoming messages.
 *
 * @param array $item
 *   An array containing arguments for sending queued message.
 *
 * @see sms_cron_queue_info().
 */
function sms_incoming_queue_worker(array $item) {
  sms_incoming($item['number'], $item['message'], $item['options']);
}

/**
 * Handles incoming messages.
 *
 * Allows gateways modules to pass messages in a standard format for processing.
 * Every implementation of hook_sms_incoming() will be invoked by this method.
 *
 * Additionally, 'sms_incoming' rules event will be invoked if rules module is
 * enabled.
 *
 * @param string $number
 *   The sender's mobile number.
 * @param string $message
 *   The content of the text message.
 * @param array $options
 *   An array of additional options.
 */
function sms_incoming($number, $message, $options = array()) {
  if (\Drupal::moduleHandler()->moduleExists('rules')) {
    $options += array('number' => $number, 'message' => $message);
    rules_invoke_event('sms_incoming', $options);
  }

  // Execute three phases
  \Drupal::moduleHandler()->invokeAll('sms_incoming', ['pre process', $number, $message, $options]);
  \Drupal::moduleHandler()->invokeAll('sms_incoming', ['process', $number, $message, $options]);
  \Drupal::moduleHandler()->invokeAll('sms_incoming', ['post process', $number, $message, $options]);
}

/**
 * Handles responses to message transactions.
 *
 * Allows gateways modules to pass message receipts and other responses to
 * messages in a standard format for processing, and provides a basic set of
 * status codes for common code handling.
 *
 * Allowed message status codes are defined as constants in this module.
 *
 * The gateway status code and message should be provided in the $options array
 * as 'gateway_message_status' and 'gateway_message_status_text'.
 *
 * @param string $number
 *   The sender's mobile number.
 * @param string $reference
 *   Unique message reference code, as provided when message is sent.
 * @param int $message_status
 *   (optional) An SMS Framework message status code, per the defined constants.
 *    Defaults to SMS_GW_UNKNOWN_STATUS.
 * @param array $options
 *   (optional) Extended options passed by the receipt receiver.
 */
function sms_receipt($number, $reference, $message_status = SMS_GW_UNKNOWN_STATUS, $options = array()) {
  // Execute three phases
  \Drupal::moduleHandler()->invokeAll('sms_receipt', 'pre process', $number, $reference, $message_status, $options);
  \Drupal::moduleHandler()->invokeAll('sms_receipt', 'process', $number, $reference, $message_status, $options);
  \Drupal::moduleHandler()->invokeAll('sms_receipt', 'post process', $number, $reference, $message_status, $options);
}

/**
 * Returns the current default gateway.
 */
function sms_default_gateway() {
  return sms_gateways('gateway', sms_default_gateway_id());
}

/**
 * Returns the current default gateway machine name.
 */
function sms_default_gateway_id() {
  return \Drupal::config('sms.settings')->get('default_gateway');
}

/**
 * Implements hook_gateway_info().
 */
function sms_gateway_info() {
  return array(
    'log' => array(
      'name' => t('Log only'),
      'send' => 'sms_send_log',
    ),
  );
}

/**
 * Logs sms message.
 *
 * This is a rudimentary implementation of an sms gateway by simply logging the
 * message to watchdog.
 *
 * @param string $number
 *   Comma-separated list of mobile numbers message was sent to.
 * @param string $message
 *   The message that was sent.
 * @param array $options
 *   An associative array of options passed to gateway.
 *
 * @return array
 *   An array containing one key:
 *   - status: true.
 */
function sms_send_log($number, $message, $options) {
  \Drupal::logger('sms')->info('SMS message sent to %number with the text: @message', array('%number' => $number, '@message' => $message));
  return array('status' => TRUE);
}


/**
 * SMS gateway menutitle callback.
 */
function sms_admin_gateway_title($gateway_id) {
  $gateway = sms_gateways('gateway', $gateway_id);
  return sprintf('%s gateway', $gateway['name']);
}

/**
 * Gets a list of all gateways.
 *
 * @param string $op
 *   (optional) The format in which to return the list. When set to 'gateway' or 'name',
 *   only the specified gateway is returned. When set to 'gateways' or 'names',
 *   all gateways are returned. Defaults to 'gateways'.
 * @param string $gateway
 *   (optional) A gateway identifier string that indicates the gateway to return.
 *   Leave at default value (NULL) to return all gateways.
 *
 * @return array|string|NULL
 *   Either an array of all gateways or a single gateway, in a variable format.
 */
function sms_gateways($op = 'gateways', $gateway = NULL) {
  list($_gateways, $_names) = _gateways_build();

  switch ($op) {
    case 'gateway':
      if (isset($_gateways[$gateway])) {
        $return = $_gateways[$gateway];
        $return['identifier'] = $gateway;
        return $return;
      }
      else {
        return NULL;
      }
    case 'names':
      return $_names;
    case 'name':
      return isset($_names[$gateway]) ? $_names[$gateway] : NULL;
    case 'gateways':
    default:
      return $_gateways;
  }
}

/**
 * Helper function to get gateway definitions in hook_gateway_info.
 *
 * @return array
 *   A array of gateway definitions from hook_gateway_info().
 */
function _gateways_build() {
  // @todo Implement caching here
  $_gateways = array();
  $_names = array();

  $gateway_array = \Drupal::moduleHandler()->invokeAll('gateway_info');
  foreach ($gateway_array as $identifier => $info) {
    $settings = \Drupal::config('sms.gateway.' . $identifier)->get('settings');
    $info['configuration'] = isset($settings) ? $settings : array();
    $_gateways[$identifier] = $info;
    $_names[$identifier] = $info['name'];
  }

  asort($_names);

  return array($_gateways, $_names);
}

/**
 * Form builder for send sms form.
 *
 * Generates a SMS sending form and adds gateway defined elements. The form
 * array that is returned can be merged with an existing form using
 * array_merge().
 *
 * @param bool $required
 *   (optional) true if phone number field is required, false otherwise.
 *
 * @see sms_send_form_submit_validate()
 * @see sms_send_form_submit_submit()
 */
function sms_send_form($required = FALSE) {
  $gateway = sms_default_gateway();
  $form['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#size' => 40,
    '#maxlength' => 16,
    '#required' => $required,
  );

  // Add gateway defined fields
  if (!empty($gateway['send form']) && function_exists($gateway['send form'])) {
    $form['gateway']['#tree'] = TRUE;
    $form['gateway'] = array_merge($gateway['send form']($required), $form['gateway']);
  }

  return $form;
}

/**
 * Form validation handler for sms_send_form().
 *
 * @see sms_send_form()
 * @see sms_send_form_submit()
 */
function sms_send_form_validate($form, FormStateInterface $form_state) {
  $number = sms_formatter($form_state->getValue('number'));
  $errors = sms_validate_number($number, $form_state->getValue('gateway'));
  if ($errors) {
    $form_state->setErrorByName('number', implode("<br />", $errors));
  }
}

/**
 * Form submission handler for sms_send_form().
 *
 * @see sms_send_form()
 * @see sms_send_form_validate()
 */
function sms_send_form_submit($form, FormStateInterface $form_state) {
  sms_send(sms_formatter($form_state->getValue('number')), $form_state->getValue('message'), $form_state->getValue('gateway', array()));
}

/******************************************************************************
 * SMS Carrier Functions
 *
 * @todo Consider moving this to email gateway, unless there is a reason to
 * have these functions without the email gateway?
 *****************************************************************************/

/**
 * Gets a list of all carriers
 *
 * @param string $domain
 *   (optional) The domain for which the carriers are to be listed.
 *
 * @return array
 *   An array of carriers keyed by the domain name and having arrays as values
 *   with the following keys:
 *   - name: The human readable name of the carrier.
 *   - type: The carrier type.
 *
 * @todo - store carriers in config instead of database
 */
function sms_carriers($domain = NULL) {
  $default_carriers = \Drupal::moduleHandler()->invokeAll('sms_carriers');
  $carriers = array();

  // Load default carriers from code.
  foreach ($default_carriers as $id => $carrier) {
    $carriers[$id] = array('name' => $carrier, 'type' => SMS_CARRIER_DEFAULT);
  }

  // Load overridden carriers from database.
  $result = db_query("SELECT name, domain FROM {sms_carriers}");

  foreach ($result as $carrier) {
    if (in_array($carrier->domain, array_keys($carriers))) {
      $type = SMS_CARRIER_OVERRIDDEN;
    }
    else {
      $type = SMS_CARRIER_NORMAL;
    }

    $carriers[$carrier->domain] = array(
      'name' => $carrier->name,
      'type' => $type,
    );
  }

  foreach (Drupal::config('sms.settings')->get('enabled_carriers') as $carrier) {
    if (is_array($carriers[$carrier])) {
      $carriers[$carrier]['status'] = 1;
    }
  }

  if ($domain) {
    $carriers[$domain]['domain'] = $domain;
    return $carriers[$domain];
  }

  return $carriers;
}

/**
 * Loads a single carrier.
 *
 * @param string $domain
 *   The domain for which the carrier is to be loaded.
 *
 * @return array
 *   An array containing the carrier info.
 *
 * @see sms_carriers()
 */
function carrier_load($domain) {
  return sms_carriers($domain);
}

/**
 * Saves a carrier to database.
 *
 * @param string $domain
 *   The domain for which the carrier is to be saved.
 * @param array $edit
 *   An array of new values to be saved for the carrier.
 */
function carrier_save($domain, $edit) {
  if (!empty($domain)) {
    $carrier = carrier_load($domain);

    if ($carrier['type'] == SMS_CARRIER_DEFAULT) {
      $edit['status'] = 1;
      drupal_write_record('sms_carriers', $edit);
    }
    elseif (!empty($edit['domain'])) {
      //Case for when the domain name hasn't changed
      if ($edit['domain'] == $domain) {
        drupal_write_record('sms_carriers', $edit, 'domain');
      }
      //Case for when the domain has changed
      else {
        carrier_delete($domain);
        drupal_write_record('sms_carriers', $edit);
      }

      // TODO: we need more logic to figure out when someone is changing the
      // domain name.
    }
  }
  else {
    $edit['status'] = 1;
    drupal_write_record('sms_carriers', $edit);
  }
}

/**
 * Deletes a carrier from the database.
 *
 * @param string $domain
 */
function carrier_delete($domain) {
  db_delete('sms_carriers')
    ->condition('domain', $domain)
    ->execute();

  // Removes carrier from config also.
  $config = \Drupal::config('sms.settings');
  $enabled_carriers = $config->get('enabled_carriers');
  foreach ($enabled_carriers as $i => $carrier) {
    if ($carrier == $domain) {
      unset($enabled_carriers[$i]);
      break;
    }
  }
  $config->set('enabled_carriers', $enabled_carriers)->save();
}

/******************************************************************************
 * HELPER FUNCTIONS
 */

/**
 * Formats a number for display using the gateway's formatting functionality.
 *
 * @param string $number
 *   The number to be formatted.
 * @param array $options
 *   An array of options.
 *
 * @return string
 *   The formatted number.
 */
function sms_format_number(&$number, $options = array()) {
  $gateway = sms_default_gateway();

  if (!empty($gateway['format number']) && function_exists($gateway['format number'])) {
    return $gateway['format number']($number, $options);
  }
  else {
    return $number;
  }
}

/**
 * Converts various sms formats into a common format for use in this module.
 *
 * @param string $number
 *   The sms number to be formatted.
 * @param int $format
 *   Undefined.
 *
 * @return string
 *   The formatted number.
 *
 * @todo Decide if the $format parameter is needed.
 */
function sms_formatter($number, $format = 1) {
  // Remove non-number characters
  $number = preg_replace("/[^0-9]/", '', $number);

  /*
   @todo The only length specification in the international numbering plan is that
   numbers should be a maximum of 15 digits.

   http://en.wikipedia.org/wiki/E.164

   if (strlen($number) > 16) {
   if ($number[0] == 1) {
   $number = ltrim($number, 1);
   }
   else {
   return FALSE;
   }
   }
   elseif (strlen($number) < 10) {
   return FALSE;
   }
   */

  return $number;
}

/**
 * Validates a phone number.
 *
 * This function passes the number to active gateway for further validation if
 * necessary. It also calls hook_sms_validate() so that other modules can
 * implement custom validation.
 *
 * @param string $number
 *   Comma-separated list of recipient numbers to validate. Passed by reference.
 * @param array $options
 *   A list of additional options.
 *
 * @return array
 *   An array of translated errors. Empty if no errors.
 */
function sms_validate_number(&$number, $options = array()) {
  $errors = array();
  // Ensure there are actual numeric characters.
  if (!strlen(preg_replace('/[^0-9]/', '', $number))) {
    $errors[] = t('No phone number provided.');
    // No need for further validation.
    return $errors;
  }

  // Allow other modules to provide number validation.
  $errors = \Drupal::moduleHandler()->invokeAll('sms_validate_number', [$number, $options]);

  // Allow the default (or the specified in $options) gateway to provide number
  // validation.
  if (isset($options['gateway'])) {
    $gateway = sms_gateways('gateway', $options['gateway']);
  }
  else {
    $gateway = sms_default_gateway();
  }
  if (isset($gateway['validate number']) && function_exists($gateway['validate number'])) {
    if ($error = $gateway['validate number']($number, $options)) {
      $errors += (array) $error;
    }
  }

  return $errors;
}

/**
 * Returns a direction code
 *
 * Direction codes are one of the SMS_DIR_* constants defined in this module.
 *
 * @param bool $out
 *   Outgoing allowed or not
 * @param bool $in
 *   Incoming allowed or not
 *
 * @return int
 *   The constant that defines this direction combination.
 */
function sms_dir($out, $in) {
  if ( $out &&   $in) {
    return SMS_DIR_ALL;
  }
  if ( $out && !$in) {
    return SMS_DIR_OUT;
  }
  if (!$out &&   $in) {
    return SMS_DIR_IN;
  }
  if (!$out && !$in) {
    return SMS_DIR_NONE;
  }
  return SMS_DIR_NONE;
}

/**
 * Returns an array of E.164 international country calling codes
 *
 * @return array
 *   Associative array of country calling codes and country names.
 */
function sms_country_codes() {
  return \Drupal::config('sms.settings')->get('country_codes');
}

/**
 * Returns HTML for the sms carriers admin form.
 *
 * @param $form
 *  A form array.
 *
 * @ingroup themeable
 *
 * @todo Update the rendering of this to drupal 8 standard. @see https://drupal.org/node/2195739
 */
function theme_sms_carriers_admin_form($variables) {
  $form = $variables['form'];

  $header = array(t('Enabled'), t('Carrier'), t('Domain'), t('Actions'));

  $rows = array();
  if ($form['status']) {
    foreach (\Drupal\Core\Render\Element::children($form['status']) as $element) {
      $name = "<div class='carrier'>";
      $name .= "<strong>{$form['status'][$element]['#title']}</strong>";
      $name .= "<div class='description'>{$form['status'][$element]['#description']}</div>";
      $name .= "</div>";
      unset($form['status'][$element]['#title']);
      unset($form['status'][$element]['#description']);
      $row = array(
          'status' => drupal_render($form['status'][$element]),
          'name' => $name,
          'domain' => drupal_render($form['domain'][$element]),
          'actions' => drupal_render($form['actions'][$element]),
      );
      $rows[] = $row;
    }
  }
  $output = '';
  $output .= _theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array( 'class' => array('sms'), 'id' => 'sms-form-table' )));
  $output .= drupal_render($form['submit']);
  $output .= drupal_render_children($form);

  return $output;
}


