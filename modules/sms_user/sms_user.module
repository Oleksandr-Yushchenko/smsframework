<?php

/**
 * @file
 * Provides integration between the SMS Framework and Drupal users.
 */

use Drupal\Core\Utility\Token;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

define('SMS_USER_BLOCKED', 0);
define('SMS_USER_PENDING', 1);
define('SMS_USER_CONFIRMED', 2);
define('SMS_USER_SMS_REGISTERED', 3);
define('SMS_USER_MAX_CHARS', 140);

// require_once 'sms_user.actions.inc';
// require_once 'sms_user.rules.inc';

/**
 * Implements hook_permission().
 */
function sms_user_permission() {
  return array(
    'receive sms' => array(
      'title' => t('receive sms'),
      'description' => t('Receive SMS from the site.'),
    ),
    'edit own sms number' => array(
      'title' => t('edit own sms number'),
      'description' => t('Edit own SMS number.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 * XXX not done
 */
//function sms_user_menu_alter(&$callbacks) {
//  $callbacks['user/%user/edit/mobile']['route_name'] = 'sms_user.user_edit';
//  $callbacks['user/%user/edit/mobile']['page callback'] = 'sms_user_settings';
//  $callbacks['user/%user/edit/mobile']['page arguments'] = array(1);
//  $callbacks['user/%user/edit/mobile']['module'] = 'sms_user';
//  $callbacks['user/%user/edit/mobile']['file'] = 'sms_user.module';
//  $callbacks['user/%user/edit/mobile']['access callback'] = TRUE;
//  dpm($callbacks);
//}

/**
 * Access control on edit users sms number.
 */
function sms_user_edit_access(AccountInterface $account) {
  return (((Drupal::currentUser()->id() == $account->id()) || Drupal::currentUser()->hasPermission('administer users'))
    && $account->id() > 0) && $account->hasPermission('receive sms');
}

/**
 * Send a message to a user.
 */
function sms_user_send($uid, $message) {
  /** @var \Drupal\Core\Session\AccountInterface $account */
  $account = User::load($uid);
  //Check if the user is enabled to receive SMS
  if ($account->hasPermission('receive sms')) {
    if ($account->sms_user[0]['status'] >= SMS_USER_CONFIRMED) {
      return sms_send($account->sms_user[0]['number'], $message, $account->sms_user[0]['gateway']);
    }
    else {
      return FALSE;
    }
  }
  else {
    drupal_set_message(t("User %user is not enabled to receive SMS, see 'receive sms' permission", array('%user' => $account->name)), 'status', TRUE);
  }
}

/**
 * Returns a verified number of a given user
 */
function sms_user_get_number(AccountInterface $account) {
  //Check if the user is enabled to receive SMS
  if ($account->hasPermission('receive sms')) {
    if ($account->sms_user[0]['status'] >= SMS_USER_CONFIRMED) {
      return $account->sms_user[0]['number'];
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Returns the uid of the owner of a number.
 */
function sms_user_get_uid($number, $status = NULL) {
  $query = db_select('sms_user', 'u')
    ->fields('u', array('uid'))
    ->condition('number', $number);

  if (isset($status)) {
    $query->condition('status', $status);
  }

  return $query->execute()->fetchField();
}

/**
 * Implements hook_sms_send().
 */
function sms_user_sms_send(&$number, &$message, &$options, &$gateway) {
  if (\Drupal::config('sms_user.settings')->get('enable_sleep', 1) && $uid = sms_user_get_uid($number)) {
    $account = User::load($uid);

    if (_sms_user_sleep_active($account)) {
      unset($gateway['send']);
      watchdog('sms_user', 'Message was not sent to @user due to sleep settings.', array('@user' => $account->getUsername()));
    }
  }
}

/**
 * Is the user sleeping?
 *
 * @param $account
 *   User account object.
 *
 * @return
 *   TRUE if its currently in the user user sleep time.
 */
function _sms_user_sleep_active($account) {
  //if the user has a timezone set in his account get the time there
  $config = \Drupal::config('system.date');
  if ($config->get('timezone.user.configurable') && (!empty($account->timezone_name))) {
    $timezone = new DateTimeZone($account->timezone);
  }
  else {
    $default = $config->get('timezone.default');
    $timezonestring = empty($default) ? 'UTC' : $default;
    $timezone = new DateTimeZone($timezonestring);
  }
  $date = new DateTime();
  $date->setTimezone( $timezone );
  $current_hour = $date->format('G');
  $current_hour = date('G');

  // User has individual settings, which will always override globals
  if (!empty($account->sms_user['sleep_enabled'])) {
    $start = $account->sms_user['sleep_start_time'];
    $end = $account->sms_user['sleep_end_time'];
  }
  else {
    $config = \Drupal::config('sms_user.settings');
    $start = $config->get('sleep_start_time');
    $end = $config->get('sleep_end_time');
  }

  // If values are not set, send the message
  if (($start == 0) && ($end == 0)) {
    return FALSE;
  }

  // Do 2 checks: one is where start < end
  // two is where end < start (like from 22 to 7)

  if ($start < $end) {
    if ($start <= $current_hour && $end > $current_hour) {
      return TRUE;
    }
  }
  if ($end < $start) {
    // current is between start and midnight
    if ($start <= $current_hour) {
      return TRUE;
    }
    // current is between midnight and end
    if ($current_hour < $end) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Menu callback; provides the forms for adding and confirming a user's mobile number.
 */
function sms_user_settings($user) {
  if (is_numeric($user)) $user = User::load($user);
  switch (isset($user->sms_user) ? $user->sms_user['status'] : 0) {
    case 0:
      $output = \Drupal::formBuilder()->getForm('\Drupal\sms_user\Form\SettingsAddForm', $user);
//      $output = drupal_get_form(\Drupal\sms_user\Form\SettingsAddForm::create(\Drupal::getContainer()), $user);
      break;
    case SMS_USER_PENDING:
      $output = \Drupal::formBuilder()->getForm('\Drupal\sms_user\Form\SettingsConfirmForm', $user);
//      $output = drupal_get_form(\Drupal\sms_user\Form\SettingsConfirmForm::create(\Drupal::getContainer()), $user);
      break;
    case SMS_USER_CONFIRMED:
    case SMS_USER_SMS_REGISTERED:
      $output = \Drupal::formBuilder()->getForm('\Drupal\sms_user\Form\SettingsResetForm', $user);
//      $output = drupal_get_form(\Drupal\sms_user\Form\SettingsResetForm::create(\Drupal::getContainer()), $user);
      break;
  }

  if (\Drupal::config('sms_user.settings')->get('enable_sleep')) {
    $output2 = array();
    $output2['phoneform'] = $output;
    $output2['sleepform'] = \Drupal::formBuilder()->getForm('\Drupal\sms_user\Form\SettingsSleepForm', $user);
    $output = $output2;
  }
  return drupal_render($output);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sms_user_send_confirmation($account, $number, $options) {
  $code = rand(1000, 9999);
  $number = sms_formatter($number);
  $data = array(
    'number' => $number,
    'status' => SMS_USER_PENDING,
    'code' => $code,
    'gateway' => $options,
  );

  $account->sms_user = $data;
  $account->save();
  sms_send($number, _sms_user_confirm_message($code), $options);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sms_user_validate_number(&$number) {
  if ($error = sms_validate_number($number)) {
    return $error;
  }
  elseif (sms_user_get_uid($number)) {
    return t('This phone number is already registered to another user.');
  }
}

/**
 * Implements hook_user_presave().
 */
function sms_user_user_presave($account) {
  // THIS IS NOT NEEDED AS THE INSERT/UPDATE HOOKS SUFFICE
}

/**
 * Implements hook_user_insert().
 */
function sms_user_user_insert($account) {
  return sms_user_save($account);
}

/**
 * Implements hook_user_update().
 */
function sms_user_user_update($account) {
  return sms_user_save($account);
}

/**
 * Implements hook_user_view().
 */
//function sms_user_user_view(AccountInterface $account, $display, $view_mode, $langcode) {
function sms_user_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  $user = \Drupal::currentUser();
  if ($account->hasPermission('receive sms') && ($user->id() == $account->id() || $user->hasPermission('administer smsframework'))) {
    if (isset($account->sms_user['status']) && $account->sms_user['status'] == SMS_USER_PENDING) {
      drupal_set_message(t('You need to confirm your mobile number, <a href="@mobile_url">enter the confirmation code sent to your mobile</a>.', array('@mobile_url' => url('user/' . $account->id() . '/edit/mobile'))));
    }
    $build['sms'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Mobile'),
    );
    $build['sms']['number'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#markup' => isset($account->sms_user['number']) ? $account->sms_user['number'] : '',
    );
    if ((\Drupal::config('sms_user.settings')->get('enable_sleep')) && ((isset($account->sms_user)) && ($account->sms_user['sleep_enabled']))) {
      $build['sms']['sleep'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => t('You will not receive messages between ' . $account->sms_user['sleep_start_time'] . ':00 and ' .$account->sms_user['sleep_end_time'] . ':00'),
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function sms_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "user_register_form") {
    $config = \Drupal::config('sms_user.settings');
    if ($config->get('registration_form')) {
      $form['sms_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('Mobile settings'),
        '#description' => t('You will receive a message to confirm your mobile information upon login.'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
      );

      $required = FALSE;
      if ($config->get('registration_form') == 2) {
        $required = TRUE;
      }


      $form['sms_user'] += sms_send_form($required);

      return $form;
    }
  }
  return $form;
}

/**
 * Implements hook_user_cancel().
 */
function sms_user_user_cancel($edit, $account, $method) {
  return sms_user_delete($account->id());
}

/**
 * Implements hook_user_validate().
function sms_user_user_validate(&$edit, $account, $category) {
  if (!empty($edit['sms_user']) && (\Drupal::config('sms_user.settings')->get('registration_form', 0) == 2 || strlen($edit['sms_user']['number']))) {
    if ($error = sms_user_validate_number($edit['sms_user']['number'])) {
      form_set_error('sms_user][number', $error);
    }
  }
}
 * hook_user_user_validate() doesn't exist in D8
 */

/**
 * Implements hook_user_login().
 */
function sms_user_user_login(AccountInterface $account) {
  // Check if it's the user's first time logging in.
  if (!$account->getLastAccessedTime() && !empty($account->sms_user['number']) && $account->sms_user['status'] <= SMS_USER_CONFIRMED) {
    sms_user_send_confirmation($account, $account->sms_user['number'], $account->sms_user['gateway']);
    drupal_set_message(t('A confirmation message has been sent to your mobile phone. Please @link.', array('@link' => l(t('confirm your number'), 'user/' . $account->id() . '/edit/mobile'))), 'status');
  }
}

/**
 * Implements hook_user_categories().
function sms_user_user_categories() {
  $categories['mobile'] = array(
    'name' => 'mobile',
    'title' => 'Mobile',
    'weight' => 10,
  );
  return $categories;
}
 * hook_user_categories() doesn't exist in D8
 */

/**
 * Load user mobile data into the user object.
 *
 * @see sms_user_user()
 *
 * @todo the sms_user appendage to $user object needs to be implemented as a
 * field in D8
 */
function sms_user_user_load($users) {
  // ERROR: return statement not found in hook_load
  $result = db_select('sms_user', 'u')
    ->fields('u', array('uid', 'number', 'status', 'code', 'gateway', 'sleep_enabled', 'sleep_start_time', 'sleep_end_time'))
    ->condition('uid', array_keys($users), 'IN')
    ->execute();

  foreach ($result as $record) {
    if (!empty($record->uid)) {
      $record->gateway = unserialize($record->gateway);
      $users[$record->uid]->sms_user = (array)$record;

      // @todo: the following is to support messaging that expect account details
      // with a delta of 0
      $users[$record->uid]->sms_user[0] = (array)$record;
    }
  }
}

/**
 * Save user module data.
 *
 * @see sms_user_user()
 */
function sms_user_save($account) {
  if (isset($account->sms_user) && $account->sms_user['number'] && $account->id() != 0) {
    $number = (object) $account->sms_user;
    $number->uid = $account->id();
    if (!isset($number->status)) {
      $number->status = NULL;
    }

    $primary_keys = array();
    if (isset($account->sms_user) && sms_user_get_uid($number->number)) { // is existing
      $primary_keys = array('number');
    }
    return drupal_write_record('sms_user', $number, $primary_keys);
  }
  return FALSE;
}

/**
 * Deletes a user's mobile information from the database
 *
 * @param $uid
 *   The uid of the user who's data is to be removed.
 * @param $number
 *   The number to delete. Defaults to FALSE which will delete all numbers.
 *
 * @see sms_user_user()
 */
function sms_user_delete($uid, $number = FALSE) {
  if (is_object($uid)) {
    $uid = $uid->uid;
  }

  $query = db_delete('sms_user')
    ->condition('uid', $uid);
  if ($number) {
    $query->condition('number', $number);
  }
  $num_deleted = $query->execute();
  return $num_deleted;
}

/**
 * Create a confirmation message sent to a user, this contains a code which is
 * used to confirm that the number is actually correct.
 *
 * @param $code
 *   Random code to send to user.
 *
 * @return $text
 *   Created message, ready to send to user.
 */
function _sms_user_confirm_message($code) {
  $text_format = \Drupal::config('sms_user.settings')->get('confirmation_message') . $code;
  $text = \Drupal::token()->replace($text_format, array('confirm-code' => $code));
  return $text;
}

/**
 * Implements hook_tokens().
 * TODO put this in upgrade patch.
 * @see http://drupal.org/documentation/modules/token/update/6/7
 *
function sms_user_tokens($type, $object = NULL, $options = array()) {
  global $user;
  $values = array();

  switch ($type) {
    case 'sms_user':
      $values['confirm-code'] = $object['confirm-code'];
      $values['mobile-url']   = url("user/$user->uid/edit/mobile", array('absolute' => TRUE));
      break;
  }
  return $values;
}*/
function sms_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
//function sms_user_tokens($type, $object = NULL, $options = array()) {
  global $user;
  $replacements = array();

  if ($type == 'sms_user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'confirm-code':
            $replacements[$original] = $data['confirm-code'];
          break;
        case 'mobile-url':
            $replacements[$original] = url("user/$user->uid/edit/mobile", array('absolute' => TRUE));
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 *
 * @see http://drupal.org/documentation/modules/token/update/6/7
 *
function sms_user_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'sms_user') {
    $tokens['sms_user']['confirm-code']    = t('The mobile confirmation code for the user.');
    $tokens['sms_user']['mobile-url']      = t('The URL for the user\'s mobile settings page.');
  }

  return $tokens;
}*/
function sms_user_token_info() {
  $info['types']['sms_user'] = array(
    'name' => t('SMS User'),
    'description' => t('Tokens related to a users\' sms settings.'),
    'needs-data' => 'user',
  );
  $info['tokens']['sms_user']['confirm-code'] = array(
    'name' => t('Confirmation code'),
    'description' => t('The mobile confirmation code for the user.'),
    'type' => 'sms_user',
  );
  $info['tokens']['sms_user']['mobile-url'] = array(
    'name' => t('Mobile URL'),
    'description' => t('The URL for the user\'s mobile settings page.'),
    'type' => 'sms_user',
  );
  return $info;
}

/**
 * Implements hook_sms_incoming().
 */
function sms_user_sms_incoming($op, $number, $message, $options) {
  $config = \Drupal::config('sms_user.settings');
  switch ($op) {
    case 'pre process':
      if ($account = sms_user_authenticate($number)) {
        $metadata = array(
          'login' => TRUE,
          'number' => $number,
          'message' => $message,
          'options' => $options,
        );
        sms_user_login_metadata($account->id(), $metadata);
        _sms_user_switch($account);
      }
      elseif ($config->get('registration_enabled') && $number) {
        if ($account = sms_user_register_new_user($number, $message, $options)) {
          // Send the new user the registration message if one exists.
          if ($message = $config->get('new_account_message')) {
            sms_user_send($account->id(), $message);
          }
        }
      }
      break;
    case 'post process':
      _sms_user_switch();
      break;
  }
}

/**
 * Store metadata related to SMS users registering/logging in.
 *
 * Drupal core doesn't really provide a way to pass user metadata around that's
 * related to a user registering (meaning during the registration cycle), so we
 * provide a storage mechanism here.
 *
 * Since it seems sloppy to handle registration cycles with one method and
 * logins with another, this function handles all SMS-related metadata related
 * to logging in and registering.
 *
 * The data is placed in this storage mechansim for the duration of the page
 * load, and is placed here before the user hooks are invoked by sms_user,
 * therefore it should be available to all modules that need it.
 *
 * @param $uid
 *   The uid of the user to store/fetch.  If NULL, return all cached accounts.
 * @param $metadata
 *   The metadata to store, or the metadata to fetch if NULL.
 *   The metadata is stored/retrieved as an associative array with the following
 *   key/value pairs:
 *
 *     'register' => A boolean indicating if the user is just registering.
 *     'login'    => A boolean indicating if the user is logging in.
 *     'number'   => The SMS number the message was sent from.
 *     'message'  => The SMS message sent with the registration/login.
 *     'options'  => The SMS message metadata passed from the gateway.
 *
 * @param $reset
 *   If TRUE, reset the accounts cache.
 *
 * @return
 *   No uid set: An array, key = uid, value = An associative array of account
 *               metadata.
 *   uid set, no metadata set: An associative array of account metadata.
 *   uid set, metadata set: Cache the metadata for the user, return TRUE.
 */
function sms_user_login_metadata($uid = NULL, $metadata = NULL, $reset = FALSE) {
  static $accounts = array();

  if ($reset) {
    $accounts = array();
  }

  if (!isset($uid)) {
    return $accounts;
  }

  if (isset($metadata)) {
    $accounts[$uid] = $metadata;
    return TRUE;
  }
  elseif (isset($accounts[$uid])) {
    return $accounts[$uid];
  }
  else {
    return FALSE;
  }
}

/**
 * Internal function to swap user.
 *
 * Safely Impersonating Another User.
 * https://drupal.org/node/218104
 * Called once to login, and once to logout. Does not nest.
 *
 * @param object $account
 *  The account object of the user to log in; or none to log out and restore
 *  the previous user and session.
 */
function _sms_user_switch($account = NULL) {
  global $user;
  $original_user = &drupal_static(__FUNCTION__ . '_user');
  $original_state = &drupal_static(__FUNCTION__ . '_state');

  if ($account) {
    $original_user = $user;
    $original_state = \Drupal::service('session_manager')->isEnabled();
    \Drupal::service('session_manager')->disable();

    $user = $account;
    $edit = array();
    \Drupal::moduleHandler()->invokeAll('user_login', $edit, $account);
    watchdog('sms_user', '%name was logged in using SMS.', array('%name' => $user->name));
  }
  elseif (! empty($original_user)) {
    $user = $original_user;
    if ($original_state) \Drupal::service('session_manager')->enable();
    watchdog('sms_user', '%name was restored as logged in using SMS.', array('%name' => $user->name));
  }
}

/**
 * Registers a new user via SMS
 *
 * @param $number
 *   The user's mobile number.
 * @param $message
 *   Body of the SMS message.
 * @param $options
 *   An associative array of metadata passed from the incoming gateway.
 * @return
 *   The user object of the created user.
 */
function sms_user_register_new_user($number, $message, $options) {
  $edit = array();

  // If we have a from address from the e-mail gateway, use it, otherwise
  // leave the e-mail fields blank.
  $mail = isset($options['sms_email_gateway_from']) ? $options['sms_email_gateway_from'] : '';

  // Pass in sms_user specific data for saving.
  $edit['sms_user'] = array(
    'number' => $number,
    'status' => SMS_USER_SMS_REGISTERED,
    'code' => '',
    'gateway' => array(),
  );

  $edit['timezone'] = '';
  // If by chance there's already a user with the same email address, then use
  // it instead of creating a new user.
  $ids = \Drupal::entityQuery('user')
    ->condition('mail', $mail)
    ->execute();
  if ((!(empty($mail))) && ($account = array_shift(User::loadMultiple($ids)))) {
    $account = User::create($account, $edit);
  }
  else {
    $edit['mail'] = $edit['init'] = $mail;

    $config = \Drupal::config('sms_user.settings');
    // Add password if enabled.
    if ($config->get('allow_password')) {
      $lines = explode("\n", $message);
      $words = explode(" ", $lines[0]);
      foreach ($words as $word) {
        if (trim($word)) {
          $edit['pass'] = preg_replace('/\s+/', '-', $word);
          break;
        }
      }
    }
    // Auto-generated password.
    if (!isset($edit['pass']) || (!$edit['pass'])) {
      $edit['pass'] = user_password();
    }

    // Pick a pseudo-random name for the user -- using the email
    // address would be a privacy violation.
    $edit['name'] = substr(md5($number . strval(REQUEST_TIME)), 0, 10);

    // Save the user.
    $edit['status'] = \Drupal::config('user.settings')->get('register') == USER_REGISTER_VISITORS;
    $account = User::create($edit);
    $account->save();
//    $account = user_save('', $edit);
    watchdog('sms_user', '%name was created using SMS.', array('%name' => $account->getUsername()));
  }


  // Verify that the account was created.
  if (is_object($account)) {
    $user = $account;

    $metadata = array(
      'register' => TRUE,
      'number' => $number,
      'message' => $message,
      'options' => $options,
    );
    sms_user_login_metadata($account->id(), $metadata);
    if ($account->status) {
      // User account is directly enabled.
      _sms_user_switch($account);
    }
    \Drupal::moduleHandler()->invokeAll('user_login', $edit, $account);

    return $account;
  }

  return FALSE;

}

/**
 * Authenticate a user based on mobile number.
 *
 * @param $number
 *   The number to authenticate against. For security, this should only be
 *   provided by incoming messages, not through user input.
 */
function sms_user_authenticate($number) {
  if ($uid = sms_user_get_uid($number)) {
    $ids = \Drupal::entityQuery('user')
      ->condition('uid', $uid)
      ->condition('status', 1)
      ->execute();
    $account = User::loadMultiple($ids);
    $account = reset($account);
    if (! empty($account)) {
      watchdog('sms_user', '%name was authenticated using SMS.', array('%name' => $account->name));
      return $account;
    }
  }
  else {
    return false;
  }
}

/**
 * Implements hook_views_api().
function sms_user_views_api() {
  return array('api' => 2);
}
 */

/**
 * Allows for setting Phonenumber, Status and Gateway using feeds
 * Implements hook_feeds_processor_targets_alter()
 * @param unknown_type $targets
 * @param unknown_type $entity_type
 * @param unknown_type $bundle
 */
function sms_user_feeds_processor_targets_alter(&$targets, $entity_type, $bundle) {
  $targets['sms_user_phonenumber'] = array(
      'name' => t('SMS User Phonenumber'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
  $targets['sms_user_status'] = array(
      'name' => t('SMS User Status'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
  $targets['sms_user_gateway'] = array(
      'name' => t('SMS User Gateway'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
}

/**
 * Callback function for feeds that sets the 3 fields we support for this
 *
 * @param unknown_type $source
 * @param unknown_type $target_item
 * @param unknown_type $target
 * @param unknown_type $value
 * @param unknown_type $mapping
 */
function _sms_user_feedsprocess_set_value($source, $target_item, $target, $value, $mapping) {
  switch($target) {
    case 'sms_user_phonenumber':
      $target_item->sms_user['number'] = $value;
      break;
    case 'sms_user_status':
      $target_item->sms_user['status'] = $value;
      break;
    case 'sms_user_gateway':
      $target_item->sms_user['gateway'] = $value;
      break;
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function sms_user_entity_property_info_alter(&$info) {
  $properties = &$info['user']['properties'];
  $properties['sms_user_phone_number'] = array(
      'label' => t("Phone Number"),
      'description' => t("The users mobile phone number."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => FALSE,
  );
  $properties['sms_user_status'] = array(
      'label' => t("SMS Status"),
      'description' => t("The users status of the Mobile Phone number."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => TRUE,
  );
  $properties['sms_user_gateway'] = array(
      'label' => t("SMS Gateway"),
      'description' => t("The SMS Gateway for this user."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => FALSE,
  );

}

/**
 * Helper function that gets properties for the sms_user_entity_property_info_alter() function
 * @param unknown_type $data
 * @param array $options
 * @param unknown_type $name
 * @param unknown_type $type
 * @param unknown_type $info
 *
 * @todo the sms_user appendage to $user object needs to be implemented as a
 * field in D8
 */
function entity_property_sms_user_get_properties($data, array $options, $name, $type, $info) {
  if (isset($data->uid) && ($data->uid > 0)) {
    $account = User::load($data->uid);
    if (isset($account->sms_user)) {
      switch ($name) {
        case "sms_user_phone_number" :
          return $account->sms_user['number'];
          break;
        case "sms_user_status" :
          switch ($account->sms_user['status']) {
            case SMS_USER_BLOCKED:
              return t('Blocked');
              break;
            case SMS_USER_PENDING:
              return t('Pending');
              break;
            case SMS_USER_CONFIRMED:
              return t('Active');
              break;
            case SMS_USER_SMS_REGISTERED:
              return t('SMS Registered');
              break;
          }
        case "sms_user_gateway" :
          if (is_string($account->sms_user['gateway'])) {
            return $account->sms_user['gateway'];
          }
          break;
      }
    }
  }
  return NULL;
}
